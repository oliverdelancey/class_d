#!/usr/bin/env python3
"""class_d v0.1.0"""

import json
import os
import re
import sys
import time

import inquirer
import requests

# disable erroneous pylint check in __main__
# pylint: disable=C0103

def create_credentials(conf_name):
    """create credentials file"""
    match = (r"^([A-Za-z0-9\\\/_\-]|"
             r"([A-Za-z0-9\\\/_\-][A"
             r"-Za-z0-9\\\/_\- ]{0,1"
             r"8}[A-Za-z0-9\\\/_\-])"
             r")$")
    err_question = [
        inquirer.Text(
            "name",
            message="What is your name?",
            validate=lambda _, x: re.match(match, x)
        )
    ]
    cc_answer = inquirer.text(message="Enter your name", validate=lambda _, x: re.match(match, x))
    cc_credentials = {"name": cc_answer}
    with open(conf_name, "w") as cc_open_file:
        json.dump(cc_credentials, cc_open_file)
    return cc_credentials


def get_credentials():
    """get credentials"""
    global_conf_dir = f"{os.getenv('HOME')}/.config"
    local_conf_dir = f"{global_conf_dir}/class_d"
    local_conf_name = f"{local_conf_dir}/credentials.json"
    # global and local are separate for future XDG support
    if not os.path.exists(local_conf_dir):
        os.mkdir(local_conf_dir)
    try:
        with open(local_conf_name, "r") as gc_open_file:
            gc_credentials = json.load(gc_open_file)
    except FileNotFoundError:
        gc_credentials = create_credentials(local_conf_name)
    except json.decoder.JSONDecodeError:
        gc_credentials = create_credentials(local_conf_name)
    return gc_credentials


def get_license_list():
    """get a list of current licenses available from GitHub"""
    response = requests.get("https://api.github.com/licenses")
    if not response:
        raise Exception("Could not get 'https://api.github.com/licenses'")
    return dict(zip([i["spdx_id"] for i in response.json()],
                    [j["key"] for j in response.json()]))


def get_license(key):
    """get license from GitHub"""
    response = requests.get(f"https://api.github.com/licenses/{key}")
    if not response:
        raise Exception("Could not get 'https://api.github.com/licenses'")
    return response.json()["body"]


if __name__ == "__main__":
    if os.path.exists("LICENSE"):
        if not inquirer.confirm("A LICENSE file already exists. Do you wish to proceed?", default=False):
            sys.exit(1)
    id_key_dict = get_license_list()
    question = [
        inquirer.List(
            "license",
            message="Which license?",
            choices=id_key_dict.keys()
        )
    ]
    answer = inquirer.list_input("Select a license", choices=id_key_dict.keys())
    credentials = get_credentials()
    license_text = get_license(answer)
    license_text_parsed = license_text.split("\n")
    license_text_parsed[2] = f"Copyright (c) {time.localtime().tm_year} {credentials['name']}"
    license_text = "\n".join(license_text_parsed)
    with open("LICENSE", "w") as open_file:
        open_file.write(license_text)
    sys.exit(0)
